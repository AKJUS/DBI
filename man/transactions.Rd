% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transactions.R
\name{transactions}
\alias{transactions}
\alias{dbBegin}
\alias{dbCommit}
\alias{dbRollback}
\title{Begin/commit/rollback SQL transactions}
\usage{
dbBegin(conn, ...)

dbCommit(conn, ...)

dbRollback(conn, ...)
}
\arguments{
\item{conn}{A \linkS4class{DBIConnection} object, as returned by
\code{\link[=dbConnect]{dbConnect()}}.}

\item{...}{Other parameters passed on to methods.}
}
\description{
A transaction encapsulates several SQL statements in an atomic unit.
It is initiated with \code{dbBegin()} and either made persistent with \code{dbCommit()}
or undone with \code{dbRollback()}.
In any case, the DBMS guarantees that either all or none of the statements
have a permanent effect.
This helps ensuring consistency of write operations to multiple tables.

\Sexpr[results=rd,stage=render]{DBI:::methods_as_rd("transactions")}
}
\details{
Not all database engines implement transaction management, in which case
these methods should not be implemented for the specific
\linkS4class{DBIConnection} subclass.
}
\examples{
con <- dbConnect(RSQLite::SQLite(), ":memory:")

dbWriteTable(con, "cash", data.frame(amount = 100))
dbWriteTable(con, "account", data.frame(amount = 2000))

# All operations are carried out as logical unit:
dbBegin(con)
withdrawal <- 300
dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
dbCommit(con)

dbReadTable(con, "cash")
dbReadTable(con, "account")

# Rolling back after detecting negative value on account:
dbBegin(con)
withdrawal <- 5000
dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
if (dbReadTable(con, "account")$amount >= 0) {
  dbCommit(con)
} else {
  dbRollback(con)
}

dbReadTable(con, "cash")
dbReadTable(con, "account")

dbDisconnect(con)
}
\seealso{
Self-contained transactions: \code{\link[=dbWithTransaction]{dbWithTransaction()}}
}
